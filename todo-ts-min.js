var h;
(function(k){"function"!=typeof String.prototype.j&&(String.prototype.j=function(a){return 0===this.indexOf(a)});k.U=function(a,b){var c;c=""+a+" is "+typeof b;b instanceof Array&&(c+=" and one instance of Array class with length "+b.length);console.log(c);for(var d in b)b.hasOwnProperty(d)&&!d.j("_")&&(c=b[d],c=typeof b[d],c="string"==c||"number"==c||"boolean"==c?" is "+c+" : "+b[d]:" is "+c,console.log(""+a+"."+d+" -> "+c))};var l=function(){return function(a,b){var c=this.m='<div class="view">   <input class="toggle" type="checkbox" {{#if completed}}checked{{/if}}>   <label>{{title}}</label>    <button class="destroy"></button></div><input class="edit" value="{{title}}">';this.d=
{};this.b={q:"<li>",h:b.compile(c),r:{".toggle":{click:"toggleComplete"},label:{J:"edit"},".edit":{blur:"close",u:"enterUpdate"},".destroy":{click:"clear"}},t:function(){this.get("model").after("change",this.e,this)},e:function(){var d=this.get("container"),a=this.get("model");d.w(this.h(a.toJSON()));d.toggleClass("completed",a.get("completed"));this.set("inputNode",d.a(".edit"));return this},ca:function(){this.get("model").toggle()},M:function(){var a=this.get("inputNode");this.get("container").addClass("editing");
a.o.value=a.o.value;a.focus()},close:function(){var a=this.get("inputNode").get("value");this.get("container").removeClass("editing");a?this.get("model").save({title:a}):this.clear()},O:function(a){13===a.keyCode&&this.close()},clear:function(){this.get("model").clear()}}}}();YUI.add("todo-view",function(a){var b=new l(a,a.Handlebars),b=a.Base.create("todoView",a.View,[],b.b);a.namespace("TodoMVC").TodoView=b},"1.0.1",{requires:["view","handlebars","event-focus"]});var m=function(){return function(){this.d=
{k:{title:{value:""},c:{value:!1}}};this.b={root:"all-todos-yui-ts",toggle:function(){this.save({c:!this.get("completed")})},clear:function(){this.K({remove:!0})}}}}();YUI.add("todo",function(a){var b=new m(a),b=a.Base.create("todo",a.Model,[a.ModelSync.Local],b.b,b.d);a.namespace("TodoMVC").Todo=b},"1.0.1",{requires:["gallery-model-sync-local","model"]});var n=function(){return function(a){this.b={v:a.TodoMVC.Todo,root:"all-todos-yui-ts",c:function(){return this.filter({asList:!0},function(a){return a.get("completed")})},
g:function(){return this.filter({asList:!0},function(a){return!a.get("completed")})}}}}();YUI.add("todo-list",function(a){var b=new n(a),b=a.Base.create("todoList",a.ModelList,[a.ModelSync.Local],b.b);a.namespace("TodoMVC").TodoList=b},"1.0.1",{requires:["gallery-model-sync-local","model-list","todo"]});var p=function(){return function(a,b){this.l='<section id="todoapp">  <header id="header">    <h1>todos</h1>    <input id="new-todo" placeholder="What needs to be done?" autofocus>  </header>  <section id="main">    <input id="toggle-all" type="checkbox">     <label for="toggle-all">Mark all as complete</label>    <ul id="todo-list"></ul>  </section>  <footer id="section-footer"></footer></section><footer id="footer-info">    <p>Double-click to edit a todo already created</p>    <p>        Created by <a href="https://github.com/joao-parana">Jo\u00e3o Antonio Ferreira</a>.        Based on <a href="http://todomvc.com">TodoMVC</a> implementation    </p></footer> ';
this.n='<span id="todo-count"><strong>{{remaining}}</strong> {{pluralize remaining "item"}} left</span><ul id="filters">  <li>    <a class="selected" href="#/">All</a>  </li>  <li>    <a href="#/active">Active</a>  </li>  <li>    <a href="#/completed">Completed</a>  </li></ul>{{#if completed}}<button id="clear-completed">Clear completed ({{completed}})</button>{{/if}} ';var c=a.config.doc;a.a("body").append(this.l);if(c.getElementById("footer-info"))console.log("Conteudo para Progressive Enhancement criado.");
else throw Error("Aplica\u00e7\u00e3o depende de BODY_TEMPLATE estar renderizado no DOM.");c=this.n;this.d={k:{ba:{value:null,validator:function(a){return null!=a&&a.name&&"todoList"==a.name?(console.log("Objeto todoList v\u00e1lido."),!0):!1}},I:{f:function(){return a.a("#todoapp")}},T:{f:function(){return a.a("#new-todo")}},C:{f:function(){return a.a("#toggle-all")}},V:{f:function(){return a.a("#main")}},P:{f:function(){return a.a("#section-footer")}},$:{value:!1},filter:{value:null},Z:{value:[{path:"/:filter",
F:"handleFilter"}]},D:{value:this}}};this.b={q:"#todoapp",h:b.compile(c),r:{"#new-todo":{u:"enterCreate"},"#clear-completed":{click:"clearCompleted"},"#toggle-all":{click:"completeAll"}},t:function(){this.set("todoList",{});this.set("todoList",new a.TodoMVC.A);var d=this.get("todoList");b.Y("pluralize",function(a,d){return 1===a?d:d+"s"});d.after(["add","remove","reset","todo:completedChange"],this.e,this);d.load();this.W("ready",function(){this.S(this.Q())&&this.L()})},e:function(){var a=this.get("todoList"),
b=a.c().size(),c=a.g().size(),e=this.get("main"),g=this.get("footer");a.size()?(e.show(),g.show(),g.w(this.h({c:b,g:c})),g.a("#filters li a").removeClass("selected"),g.all("#filters li a").filter('[href="#/'+(this.get("filter")||"")+'"]').addClass("selected")):(e.s(),g.s());this.get("allCheckbox").set("checked",!c);this.p()},p:function(){var b,c=a.a(a.config.doc.createDocumentFragment());b=this.get("todoList");switch(this.get("filter")){case "active":b=b.g();break;case "completed":b=b.c();break}b.i(function(b){b=
(new a.TodoMVC.B({v:b})).e().get("container");c.append(b)});this.get("container").a("#todo-list").aa(c)},N:function(a){var b=this.get("todoList"),c=this.get("inputNode"),e=c.get("value");13===a.keyCode&&e&&(b.create({title:e}),c.set("value",""))},G:function(){var a=this.get("todoList"),b=a.c();a.remove(b);b.i(function(a){a.clear()})},H:function(){var a=this.get("todoList"),b=this.get("allCheckbox").get("checked");a.i(function(a){a.save({c:b})})},R:function(a){this.set("filter",a.X.filter);this.get("todoList").load()}}}}();
YUI.add("todo-app",function(a){var b=new p(a,a.Handlebars),b=a.Base.create("todoApp",a.App,[],b.b,b.d);a.namespace("TodoMVC").TodoApp=b},"1.0.1",{requires:["app-base","todo-list","todo-view","node","handlebars"]})})(h||(h={}));
